**Spring Security**

Secure Coding : 보안성 높은 어플리케이션을 구현하기 위해 보안 요소를 고려해 코딩하는 기법을 의미 
                   (SW의 보안 취약점을 배제하기 위한 코딩 )

Spring Security : 자바 기반 애플리케이션의 보안 기능을 위한 Spring 하위 프레임워크  

기본적인 보안 기능으로 인증 및 인가와 
강화된 보안 기능으로는 비밀번호 암호화, csrf 방지, 세션관리기능 등을 지원한다 


1) 인증(authentication) : 현재 사용자가 누군지 확인 (일반적으로 로그인)
코드상에서는 authentication은 인증 과정에 사용되는 핵심 객체(로그인 인증 정보 객체)이다 
로그인 시점에 기존 세션 사용하지 않고 새로 세션 아이디를 발급해준다 

2) 인가 (authorization) : 현재 사용자가 특정 기능을 사용할 권한이 있는지 검사

3) 비밀번호 암호화 : 보안 운영체제의  대표적인 OpenBSD에서 사용하는 암호 인증 메커니즘인
 단방향 암호화 해싱함수의 bcrypt 암호화 기법을 이용 
 
4) CSRF(Cross-Site Request Forgery:사이트간 요청 위조 공격 ) 방지
csrf 방지를 위한 csrf 토큰을 이용 

CSRF(Cross-Site Request Forgery:사이트간 요청 위조 공격 ) 해킹이란 
사용자 의지와 무관하게 공격자가 의도한 행위를 특정웹사이트에 요청하게 하는 공격을 말한다   
사용자가 로그인한 상태에서 사이트간 요청 위조 공격 코드가 삽입된  페이지를 동일한 브라우저의 다른 탭에서 
열면 공격 대상이 되는 웹사이트는 위조된 공격 명령이 믿을 수 있는 사용자로부터 발송된 것으로 판단되어 공격에 노출된다
대응방안: csrf token을 이용 
http post 방식( insert, delete , update : 서버의 정보를 변경하는 요청 )의 요청일 경우 
해당 서버에서 발행한 csrf 토큰을 발급받아 요청시 발급받은 csrf 토큰이 있는 경우에만 실행하게 한다 

5) 세션 관리 기능 

스프링 시큐리티에서는 사용자가 로그인을 통해 인증을 한 이후에는 로그인전 기존 세션을 무효화하고 
세션을 새롭게 생성하는 방식(로그아웃 후 다시 로그인 할때도 포함)을 통해서 
선의의 사용자가 인증된 후 악의적인 해커가 인증 세션 ID를 
재사용하는것을 차단할 수 있다.(세션 하이재킹(가로채기) 공격으로부터 보호) 


					
**Spring Security 개발단계 **
1. maven pom.xml 
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-security</artifactId>
</dependency>		
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-taglibs</artifactId>
</dependency>

2. SQL DDL 정의 ( 회원member , 권한authorities 테이블 ) 

3. 스프링 시큐리티 설정  org.kosta.config.security.WebSecurityConfig extends WebSecurityConfigurerAdapter  

4. MemberAuthenticationProvider 구현 ( 인증 및 인가 로직을 정의한 클래스 ) 

5. Controller(@Secured("ROLE_MEMBER") 인증 및 인가처리) , Service(비밀번호 암호화처리) , Mapper(인증 및 인가 정보 조회) 정의 

6. View 
   1) spring security custom tag 를 이용한 인증 및 인가(권한) 상태에 따른 view 제공 ( left.jsp, admin/main.jsp ) 
   2) csrf 해킹 방지를 위한 csrf token 적용 ( http post 일때 ) ( left.jsp, member ) 

  








